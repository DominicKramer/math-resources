/* slightly modified sample from epix samples gallery */
#include "epix.h"
#include <stdio.h>
using namespace ePiX;

// gather references to integrand
double f(double t)
{
  //return 1.5*(sqrt(t+0.1)-sqrt(0.1));
  //return (t-0.5)*(t-0.5)+0.5;
  //if (t < 0.2) {
    //return f(0.2)-(t-0.2)*(t-0.2);
  //} else if (t > 1.75) {
    //return f(1.75)+0.2*(t-1.75);
  //} else {
  //  return -(t-2.2)*t*(t-1.7)+1.3;
  //}
  //return 4*(t-0.15)*(t-0.7)*(t-1.5)+0.9;
  return 4*(t-0.15)*(t-0.7)*(t-1.5)+0.2;
}

double simple_fmin(double from, double to, double *c)
{
	double t;
	double inc = (to-from)/500.0;
	double themin = f(from);

	for (t = from; t <= to; t += inc) {
		if (f(t) < themin) {
			themin = f(t);
			*c = t;
		}
	}

	return themin;
}

double simple_fmax(double from, double to, double *c)
{
	double t;
	double inc = (to-from)/500.0;
	double themax = f(from);

	for (t = from; t <= to; t += inc) {
		if (f(t) > themax) {
			themax = f(t);
			*c = t;
		}
	}

	return themax;
}

int main()
{
  double D_lower, D_upper;
  double R_lower, R_upper;
  double thec,thed;
  //double M;

  //picture(P(-1.5,-0.9), P(1.8,0.9), "2.7x1.2in");
  picture(P(-2.7,-0.6), P(1.7,0.7), "4x1in");

  begin();

  //h_axis(2);
  //v_axis(1);

  //line(P(-2.7,-0.8), P(1.8,0.8));

  plain(Black(0.3));
  line(P(-0.5,0.0),P(1.8,0.0));
  line(P(0.0,-0.6),P(0.0,0.7));
  plain(Black());

  //M = 0.8;


  D_lower = 0.2;
  D_upper = 1.5;

  R_lower = simple_fmin (D_lower, D_upper, &thed);
  R_upper = simple_fmax (D_lower, D_upper, &thec);

  //bbold();
  //line(P(0.0,R_lower),P(0.0,R_upper));
  //line(P(D_lower,0.0),P(D_upper,0.0));
  //plain();

  //slope = (f(x)-f(c))/(x-c);

  //line(P(c-0.2,f(c)-0.2*slope),P(x+0.2,f(x)+0.2*slope));

  //fill(Black());
  //circle(P(c,f(c)),0.03);
  //circle(P(x,f(x)),0.03);
  //nofill();

  //line_style("-.-");
  //line(P(-1.0,M),P(D_upper,M));
  //line(P(-1.0,-M),P(D_upper,-M));
  //solid();

  dashed();
  line(P(-0.1,R_lower),P(D_upper,R_lower));
  line(P(-0.1,R_upper),P(D_upper,R_upper));
  solid();
  
  label(P(-0.1,R_upper), P(-4,0), "$\\text{absolute maximum of } f = f(c)$", l);
  label(P(-0.1,R_lower), P(-4,0), "$\\text{absolute minimum of } f = f(d)$", l);

  line(P(D_lower,-0.05),P(D_lower,0.05));
  line(P(D_upper,-0.05),P(D_upper,0.05));
  label(P(D_lower,-0.14), P(0,0), "$a$", c);
  label(P(D_upper,-0.14), P(0,0), "$b$", c);

  //line(P(thed,-0.05),P(thed,0.05));
  //line(P(thec,-0.05),P(thec,0.05));

  dashed();
  line(P(thed,0),P(thed,R_lower));
  line(P(thec,0),P(thec,R_upper));
  solid();

  label(P(thed,0.14), P(0,0), "$d$", c);
  label(P(thec,-0.14), P(0,0), "$c$", c);

  //label(P(-1.0,M), P(-2,0), "$M$", l);
  //label(P(-1.0,-M), P(-2,0), "$-M$", l);

  /*{ double fDpos = (0.4*R_lower+0.6*R_upper);
  spline(P(0.0,R_upper),P(-0.1,R_upper),P(-0.06,fDpos),P(-0.16,fDpos));
  spline(P(0.0,R_lower),P(-0.1,R_lower),P(-0.06,fDpos),P(-0.16,fDpos));

  label(P(-0.16,fDpos), P(-2,0), "$f(D)$", l);
  }*/
  
  //label(P((D_lower+D_upper)/2.0,0.0), P(0,-4), "$D$", b);
  /*{ double Dpos = (0.75*D_lower+0.25*D_upper);
  spline(P(D_upper,0.0),P(D_upper,-0.1),P(Dpos,-0.03),P(Dpos,-0.12));
  spline(P(D_lower,0.0),P(D_lower,-0.1),P(Dpos,-0.03),P(Dpos,-0.12));

  label(P((0.75*D_lower+0.25*D_upper),-0.12), P(0,-2), "$D$", b);
  }*/

  //label(P(D_lower,0.0), P(0,-4), "$x$", b);
  //label(P(D_upper,0.0), P(0,-4), "$y$", b);

  //label(P(x-0.3,f(x)-0.3*slope),
        //P(1,4), "slope $= \\frac{f(x)-f(y)}{x-y}$", tl);
  //label(P(0.2,1.2),P(0,0), "slope $= \\frac{f(x)-f(y)}{x-y}$", br);
  //label(P(0.2,1.2),P(0,0), "$\\lvert \\text{slope} \\rvert \\leq K$", br);

  bold();
  plot(f, D_lower, D_upper, 40);

  tikz_format();
  end();
}

