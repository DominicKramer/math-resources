%% This program is free software; you can redistribute it and/or
%% modify it under the terms of the GNU General Public License
%% as published by the Free Software Foundation; either version 2
%% of the License, or (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
%%
%% Author: Martin R. Ehmsen, ehmsen@imada.sdu.dk.
%% Department of Mathematics and Computer Science,
%% University of Southern Denmark, DK
%%
%% You can find an online copy of the GPL at
%% http://www.gnu.org/copyleft/gpl.html .
%% 
%% Note: shell-escape needs to be activated for this to work.
%% This can either be done by passing -shell-escape as an option to
%% latex or by adding/changing "shell_escape = t" in your texmf.cnf .

% 0.21 -> 0.3: Intermediate files are now stored with different filenames.
% The return code of each Python shell execution is stored in an .rc file.
% Any stderr output of a failed Python shell execution is inserted as
% a red verbatim in the resulting document.
%                                -- James Brotchie <brotchie@gmail.com>
%
% 0.2 -> 0.21: Moved \newwrite\@module from \@writemodule and out, since
% no more than 15 \newwrites are allowed (and the previous version created a new
% every time \@writemodule was called.

% Adapted for use as sageoutput.sty.  Not for general purpose so I won't
% post it separate from the book at http://joshua.smcvt.edu/linearalgebra .
% 2012-Oct-30  Jim Hefferon jhefferon@smcvt.edu

\NeedsTeXFormat{LaTeX2e}[1994/12/01]
\ProvidesPackage{sageoutput}[2012/10/29 v0.3 Sage output in LaTeX]
\RequirePackage{etoolbox}
% Package options: generatesage, notgeneratesage
%  Generate the Sage output fresh, or take it from the .result files.
\newtoggle{generatesageoutput}  % from etoolbox
\toggletrue{generatesageoutput}
\DeclareOption{generatesage}{\toggletrue{generatesageoutput}}  % default
\DeclareOption{notgeneratesage}{\togglefalse{generatesageoutput}}

\ProcessOptions\relax
\iftoggle{generatesageoutput}{%
  \typeout{SAGEOUTPUT: generatesageoutput is on}
  \RequirePackage{ifplatform}
  \ifwindows
    \typeout{SAGEOUTPUT: I don't know that Sage output can be generated under Windows.}
  \fi
  \ifshellescape
    \relax
  \else
    \AtBeginDocument{\typeout{SAGEOUTPUT: Warning!  You asked to generate Sage output with your option to the documentclass but for that you must call XeLaTeX with -shell-escape.}}
  \fi
}{%
  \relax
}

\RequirePackage{verbatim}
\RequirePackage{listings}
\RequirePackage{color}

% Set up the output
\newwrite\@outsage
\newwrite\@outedit
% \newwrite\@module
\newread\@retcodesage

% Put the resulting Python code in separate files.
\newcounter{@SageEnvironmentCounter}
\setcounter{@SageEnvironmentCounter}{1}
\newcommand{\@outname}{\jobname sage\arabic{@SageEnvironmentCounter}}
\newcommand{\@subdirname}{sageoutput/}  % files for Sage output

\begingroup \catcode `|=0 \catcode `[=1
\catcode`]=2 \catcode `\{=12 \catcode `\}=12
\catcode`\\=12 |gdef|@xsage#1\end{sageoutput}[|immediate|write|@outsage[#1]|end[sageoutput]]
|endgroup

\def\sageoutput{\kernel@ifnextchar [{\@sageoutput}{\@sageoutput[]}}

\def\@sageoutput[#1]{%
% \gdef\@sageinclude{#1}
% Save edit information to the new edit file
\immediate\openout\@outedit=\@subdirname\@outname.editnew
\immediate\write\@outedit{#1}
\immediate\closeout\@outedit
% Save sage commands
\immediate\openout\@outsage=\@subdirname\@outname.sagecmdnew
\newlinechar='15
\begingroup \catcode`\^^M=12 %
\let\do\@makeother\dospecials\obeyspaces%
\@xsage}

\def\endsageoutput{%
  \endgroup
  \immediate\closeout\@outsage
\iftoggle{generatesageoutput}{% Run Python scripts to generate Sage output
  % \typeout{SAGEOUTPUT: Running shell escape commands}
  \immediate\write18{\@subdirname runsage.py \@subdirname\@outname. 2> \@subdirname\@outname.err; echo -n $? > \@subdirname\@outname.rc}}{}

\lstinputlisting{\@subdirname\@outname.result}

\iftoggle{generatesageoutput}{%
  % Read the return code from runsage.
  \immediate\openin\@retcodesage=\@subdirname\@outname.rc
  \immediate\read\@retcodesage to \rc
  \immediate\closein\@retcodesage
  % If the return code isn't zero then include the traceback.
  \ifnumequal{\rc}{0}{}{%
      \begingroup
          \color{red} Trouble running job \arabic{@SageEnvironmentCounter}.
          \verbatiminput{\@subdirname\@outname.err}
      \endgroup
  }}{}

\immediate\stepcounter{@SageEnvironmentCounter}
}

% \def\@writemodule{%
% \immediate\openout\@module=latex.py
% \immediate\write\@module{jobname="\@outname"}
% \immediate\closeout\@module}

% BUGS:
%
% \immediate\write18{cat \@pythoninclude\space\jobname.py | python > \jobname.py.out 2>\jobname.py.err}
%
% 1. Watch out for indentation done by aucTeX in Emacs
%
% 2. Let the package accept a "final version" option, such
% that the output of each python run is saved such that it can be
% inserted into the document by hand 
% (conference, journals are not likely to compile with
% shell_escape or have python).
%
% \gdef\@prepython{}
% \def\prepython#1{%
% \gdef\@prepython{#1}
% }
% sed -e 's/^  //g' cluster.py
% \immediate\write18{\@prepython\space\jobname.py > \